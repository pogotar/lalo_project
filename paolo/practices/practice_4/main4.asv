% MPC

clear all; close all; clc


%% definition of the sys
s = tf('s');
G = 0.5 / (s^2+0.4*s+1)
tsim = 15;       % time of the simulation
x_0 = [0 10]'; % initial state
T_sampling = 0.1;   % seconds
sys = ss(G)
sysd = c2d(sys,T_sampling);
A = sysd.A
B = sysd.B;
C = sysd.C;
D = sysd.D;
C_temp = eye(length(A));
D_temp = zeros(length(B), 1); 

u_min = -5; % constraints
u_max = 5;


%% 1) sim - LQR REGULATOR without oscillations
Q_LQ_1 = 10000*eye(2); 
R_LQ_1 = 1;

[LQ_d_1, S1, e1] = dlqr(A, B, Q_LQ_1, R_LQ_1 );  % would have been great if it weren't for saturations
% [K,S,e] = dlqr(A,B,Q,R,N) 
% calculates the optimal gain matrix K 
% The default value N=0 is assumed when N is omitted.
%  returns the infinite horizon solution S of the associated discrete-time Riccati equation
% and the closed-loop eigenvalues e = eig(A-B*K)

Q_LQ_2 = 10*eye(2); 
LQ_d_2 = dlqr(A, B, Q_LQ_2, R_LQ_1 );

Q_LQ_3 = 0.1*eye(2); 
LQ_d_3 = dlqr(A, B, Q_LQ_3, R_LQ_1 );

% sim LQ_point_1


%% 2) MPC Q_sig  R_sig
% mpc take directly into account in the computation the constraints

N = 10;
Q_sig = blkdiag( kron(eye(N-1),Q_LQ_1) , S1);  % X Ã¨ grosso N
R_sig = kron(eye(N),R_LQ_1);


%% 3) MPC A_sig  B_sig

A_sig = [];
for i = 1:N;
    A_sig = kron( ones(N,1), A^i );
end

temp2 = [];
for i = 1:N
    temp1 = [];
        for j = 1:N
            temp1 = [temp1; A^(i-)]
            

